// Generated by CoffeeScript 1.9.3
(function() {
  var __dirname, averageCop, copertures, countries, drawViz, fix, inverseFix, isOdd, maxCop, minCop, modality, modalitySet, nameDis,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  copertures = function(data, country, year1, year2) {
    var error, res;
    if (year1 == null) {
      year1 = "2007";
    }
    if (year2 == null) {
      year2 = "2013";
    }
    try {
      return res = data.filter(function(e) {
        var ref;
        return (e.areas === country) && ((+year1 <= (ref = +e["Reference year(s)"]) && ref <= +year2));
      });
    } catch (_error) {
      error = _error;
      console.log(error);
      return void 0;
    }
  };

  modality = function(data, country, disease) {
    var error, res;
    try {
      res = data.filter(function(e) {
        return (e.Country === country) && (e.Disease === disease);
      });
      res = res.map(function(e) {
        return e["Modality"];
      });
      return res;
    } catch (_error) {
      error = _error;
      console.log(error);
      return void 0;
    }
  };

  modalitySet = function(data, countries, disease) {
    var res;
    res = countries.map(function(c) {
      return modality(data[0], c, disease);
    });
    return _.uniq(_.flatten(res));
  };

  countries = function(data) {
    return _.uniq(data.map(function(e) {
      return e.Country;
    }));
  };

  fix = function(country) {
    var fixNames;
    fixNames = {
      "United Kingdom": "United Kingdom of Great Britain and Northern Ireland",
      "The Netherlands": "Netherlands"
    };
    if (fixNames[country] != null) {
      return fixNames[country];
    } else {
      return country;
    }
  };

  inverseFix = function(country) {
    var fixNames;
    fixNames = {
      "United Kingdom of Great Britain and Northern Ireland": "United Kingdom",
      "Netherlands": "The Netherlands"
    };
    if (fixNames[country] != null) {
      return fixNames[country];
    } else {
      return country;
    }
  };

  nameDis = function(dis) {
    var o;
    o = {
      "DTP3 (%)": "Pertussis",
      "MCV1 (%)": "Measles-mumps-rubella",
      "Pol3 (%)": "Polio"
    };
    return o[dis];
  };

  isOdd = function(num) {
    return num % 2;
  };

  averageCop = function(data, countries, disease) {
    var country, res;
    if (disease == null) {
      disease = "";
    }
    res = (function() {
      var j, len, results;
      results = [];
      for (j = 0, len = countries.length; j < len; j++) {
        country = countries[j];
        results.push(copertures(data, fix(country)));
      }
      return results;
    })();
    res = _.zip.apply(_, res);
    return res = res.map(function(a) {
      return d3.mean(a, function(d) {
        return +d[disease];
      });
    });
  };

  minCop = function(data, countries, disease) {
    var res;
    if (disease == null) {
      disease = "";
    }
    res = data.filter(function(e) {
      var ref;
      return ref = inverseFix(e.areas), indexOf.call(countries, ref) >= 0;
    });
    return d3.min(res, function(e) {
      return +e[disease];
    });
  };

  maxCop = function(data, countries, disease) {
    var res;
    if (disease == null) {
      disease = "";
    }
    res = data.filter(function(e) {
      var ref;
      return ref = inverseFix(e.areas), indexOf.call(countries, ref) >= 0;
    });
    return d3.max(res, function(e) {
      return +e[disease];
    });
  };

  drawViz = function(error, data) {
    var av1, av2, av3, cell, country, dh, dw, height, heightCell, index, j, k, l, len, len1, len2, m, ma, mainG, modData, ra, svg, width, widthCell, xLabels, yAxis, yLabels, yScale;
    modData = data[0];
    countries = countries(data[0]);
    av1 = averageCop(data[1], countries, "DTP3 (%)");
    av2 = averageCop(data[2], countries, "MCV1 (%)");
    av3 = averageCop(data[3], countries, "Pol3 (%)");
    width = 900;
    height = 5050;
    m = {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
    svg = d3.select("#viz").append("svg").attr({
      "viewBox": "0 0 " + width + " " + height,
      "preserveAspectRatio": "xMidYMin slice",
      "width": width,
      "height": height
    });
    ra = textures.circles().thicker().lighter().fill("#ccc");
    svg.call(ra);
    ma = textures.lines().lighter().stroke("#da2647");
    svg.call(ma);
    mainG = svg.append("g").attr("transform", "translate(" + 200 + "," + 100 + ")");
    widthCell = 150;
    heightCell = 150;
    yScale = d3.scale.linear().domain([0, 100]).range([heightCell, 0]);
    yAxis = d3.svg.axis().scale(yScale).ticks(4).tickValues([25, 50, 75]).orient("right");
    cell = function(data, country, disease, average, dx, dy, showAxis) {
      var avBar, bar, bars, cellG, dw, lineBar, mod, w;
      if (dx == null) {
        dx = 0;
      }
      if (dy == null) {
        dy = 0;
      }
      if (showAxis == null) {
        showAxis = false;
      }
      cellG = mainG.append("g").attr("class", "cell").attr("transform", "translate(" + dx + "," + dy + ")");
      if (showAxis) {
        cellG.append("g").attr("class", "y axis").attr("transform", "translate(" + (widthCell + 10) + ",0)").call(yAxis);
      }
      mod = (function() {
        m = modality(modData, country, nameDis(disease));
        if ((indexOf.call(m, "MA") >= 0) || (indexOf.call(m, "MR") >= 0)) {
          return ma.url();
        }
        if (indexOf.call(m, "RA") >= 0) {
          return ra.url();
        }
      })();
      cellG.append("rect").attr({
        "x": 0,
        "y": 0,
        "width": widthCell,
        "height": heightCell
      }).style({
        "height": "",
        "width": "",
        "shape-rendering": "crispEdges",
        "fill": mod,
        "stroke-width": 0
      });
      w = (widthCell - 0) / average.length;
      dw = 0;
      bars = cellG.append("g").attr("transform", "translate(" + 0 + "," + 0 + ")");
      bar = bars.selectAll("rect").data(copertures(data, fix(country))).enter().append("rect").attr({
        "x": function(d, i) {
          return w * i + dw;
        },
        "y": function(d, i) {
          var v;
          v = +d[disease];
          return yScale(d3.max([v, average[i]]));
        },
        "width": w - dw * 2,
        "height": function(d, i) {
          var v;
          v = +d[disease];
          return Math.abs(yScale(v) - yScale(average[i]));
        }
      }).style({
        "height": "",
        "width": "",
        "shape-rendering": "crispEdges",
        "stroke-width": 0,
        "fill-opacity": function(d, i) {
          if (isOdd(i)) {
            return 0.4;
          } else {
            return 0.5;
          }
        },
        "fill": function(d, i) {
          var v;
          v = +d[disease];
          if (v - average[i] > 0) {
            return "#44d7a8";
          } else {
            return "#da2647";
          }
        }
      });
      lineBar = bars.selectAll(".valuelines").data(copertures(data, fix(country))).enter().append("line").attr({
        "x1": function(d, i) {
          return w * i + dw;
        },
        "x2": function(d, i) {
          return w * (i + 1) - dw;
        },
        "y1": function(d) {
          var v;
          v = +d[disease];
          return yScale(v);
        },
        "y2": function(d) {
          var v;
          v = +d[disease];
          return yScale(v);
        },
        "class": "averageLine"
      }).style({
        "stroke": function(d, i) {
          var v;
          v = +d[disease];
          if (v - average[i] > 0) {
            return "#44d7a8";
          } else {
            return "#da2647";
          }
        }
      });
      return avBar = bars.selectAll("lines").data(average).enter().append("line").attr({
        "x1": function(d, i) {
          return w * i + dw;
        },
        "x2": function(d, i) {
          return w * (i + 1) - dw;
        },
        "y1": function(d) {
          return yScale(d);
        },
        "y2": function(d) {
          return yScale(d);
        },
        "class": "averageLine"
      });
    };
    dw = 20;
    dh = 20;
    for (index = j = 0, len = countries.length; j < len; index = ++j) {
      country = countries[index];
      cell(data[1], country, "DTP3 (%)", av1, 0, index * (heightCell + dh));
    }
    for (index = k = 0, len1 = countries.length; k < len1; index = ++k) {
      country = countries[index];
      cell(data[3], country, "Pol3 (%)", av3, widthCell + dw, index * (heightCell + dh));
    }
    for (index = l = 0, len2 = countries.length; l < len2; index = ++l) {
      country = countries[index];
      cell(data[2], country, "MCV1 (%)", av2, (widthCell + dw) * 2, index * (heightCell + dh), true);
    }
    yLabels = svg.append("g").attr("transform", "translate(180, 180)");
    yLabels.selectAll("text").data(countries).enter().append("text").text(function(d) {
      return d;
    }).attr("class", "labels ylabels").attr("transform", function(d, i) {
      return "translate(0," + i * (heightCell + dh) + ")";
    });
    xLabels = svg.append("g").attr("transform", "translate(180, 80)");
    return xLabels.selectAll("text").data(["Pertosse", "Polio", "Morbillo"]).enter().append("text").text(function(d) {
      return d;
    }).attr("class", "labels").attr("transform", function(d, i) {
      return "translate(" + (widthCell / 2 + (widthCell + dw) * i) + ",0)";
    });
  };

  __dirname = "./data/viz1/";

  queue().defer(d3.csv, __dirname + "obblibo_vaccini_europa.csv").defer(d3.csv, __dirname + "dtp3.csv").defer(d3.csv, __dirname + "mcv1.csv").defer(d3.csv, __dirname + "pol3.csv").awaitAll(drawViz);

}).call(this);
